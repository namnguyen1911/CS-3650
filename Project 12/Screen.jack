// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array theScreen;
    static boolean screenColor;

    /** Initializes the Screen. */
    function void init() {
        var int i;
        let theScreen = Array.new(16); 
        let i = 0;
        while (i < 16) {
            let theScreen[i] = i;
            let i = i + 1;
        } 
        let screenColor = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {return;}

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean clr) {
        let screenColor = clr;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value;
        let address = 16384 + ((32 * y) + (x / 16));
        let value = Memory.peek(address);
        if (screenColor) {let value = theScreen[0] | value;} 
        else {let value = (~theScreen[0]) & value;}
        do Memory.poke(address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int x3, y3, a, b, diff;

        let diff = 0;
        let a = 0;
        let b = 0;

        if (Math.abs(y2 - y1) = 0) {
            while (Math.abs(x2 - x1) > a | Math.abs(x2 - x1) = a) {
                if (x2 > x1) {do Screen.drawPixel((x1 + a), y1);} 
                else {do Screen.drawPixel(x1 - a, y1);}
                let a = a + 1;
            }
        }

        if (Math.abs(x2 - x1) = 0) {
            while (Math.abs(y2 - y1) > b | Math.abs(y2 - y1) = b) {
                if (y2 > y1) {do Screen.drawPixel(x1, y1 + b);    }
                else {do Screen.drawPixel(x1, y1 - b);}
                let b = b + 1;
            }
        }
        
        while ((Math.abs(x2 - x1) > a | Math.abs(x2 - x1) = a) & (Math.abs(y2 - y1) > b | Math.abs(y2 - y1) = b )) {
            if (x2 > x1) {let x3 = x1 + a;} 
            else {let x3 = x1 - a;}
            if (y2 > y1) {let y3 = y1 + b;} 
            else {let y3 = y1 - b;}
            do Screen.drawPixel(x3, y3);
            if (diff < 0) {
                let a = a + 1;
                let diff = diff + Math.abs(y2 - y1);
            } 
            else {
                let b = b + 1;
                let diff = diff - Math.abs(x2 - x1);
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int z;
        let z = 0;
        while (x2 - x1 > z | x2 - x1 = z) {
            do Screen.drawLine(x1 + z, y1, x1 + z, y2);
            let z = z + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int fill;
        let fill = 0;
        while (fill < 2*r) {
            let x = x - Math.sqrt((r * r) - (fill * fill));
            let y = y + fill;
            do Screen.drawLine(x, y, x, y);
            let fill = fill  + 1;
        }
        return;
    }
}