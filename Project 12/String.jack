// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array text; 
    field int length, size;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength = 0) {
            let maxLength = 1;
        }
        let text = Array.new(maxLength);
        let size = maxLength;
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do text.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return text[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let text[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(length < size) {
            let text[length] = c;
            let length = length + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) {   
            let length = length - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int index, value;
        var boolean neg;

        let value = 0;
        let index = 0;

        if(text[0] = 45) {
            let neg = true;
        }

        while (index < length) {
            if (~(text[index] < 48) & ~(text[index] > 57)) {
                let value = (value * 10) + text[index] - 48;
            }
            let index = index + 1;
        }

        if (neg) {
            return value = -value;
        }
        else {
            return value;
        }
        
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int lastDigit, temp;
        let temp = Math.abs((10 * (val / 10)));
        let lastDigit = Math.abs(val) - temp;

        if (Math.abs(val) < 10) {
            if (val < 0) {
                do appendChar(45);
            }
            do appendChar(48 + lastDigit);
        } else {
           do setInt(val / 10);
           do appendChar(48 + lastDigit); 
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}