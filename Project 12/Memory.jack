// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack memory
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {
    static Array memory, heap, freeList, heapLength;
    static int heapBase, heapTop;

    /** Initializes the class. */
    function void init() {
      let memory = 0;
      let heapBase = 2048;
      let heapTop = 16384;
      let heapLength = heapTop - heapBase + 1;

      let heap = heapBase;
      let freeList = heapBase;
      let heap[0] = 0;
      let heap[1] = heapLength;
      return;
    }

    /** Returns the memory value at the given address. */
    function int peek(int address) {
      return memory[address];
    }

    /** Sets the memory value at the given address to the given value. */
    function void poke(int address, int value) {
      let memory[address] = value;
      return;
    }

    /** Finds an available memory block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array curr_addr;
        var int new_free_block;
        var int curr_size;
        let curr_addr = freeList; 
        
        while (~(curr_addr[0] = 0)) {
            let curr_size = curr_addr[1];
            if (curr_size > (size + 2)) {
                let new_free_block = curr_addr + (size + 2);
                let new_free_block[0] = 0;
                let new_free_block[1] = curr_size - size;
                let freeList = new_free_block;
                return curr_addr;
            }
            let curr_addr = curr_addr[0];
        }

        if (curr_addr[0] = 0) { 
            let curr_size = curr_addr[1];
            if (curr_size > (size + 2)) {
                let new_free_block = curr_addr + (size + 2);
                let new_free_block[0] = 0;
                let new_free_block[1] = curr_size - size;
                let freeList = new_free_block;
                let curr_addr[1] = size;
                return curr_addr;
            }
        }

        return -1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array currentAddress;

        //let currentAddress = freeList;

        while (~(currentAddress[0] = 0)) {
            let currentAddress = freeList[0];
        }

        let currentAddress[0] = o;
        let o[0] = 0;

        return;
    }
}